{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEditing","setIsEditing","authorInputRef","useRef","textInputRef","when","message","path","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCwD/BC,EArDG,SAACL,GACjB,MAAkCM,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,qCAEA,cAAC,IAAD,CAAQE,KAAML,EAAWM,QAAS,SAACC,GAAD,MAAU,sCAC1C,cAAC,EAAD,UACE,uBAAMC,QAda,WACvBP,GAAa,IAawBP,UAAWC,IAAQc,KAAMC,SAxBhE,SAA2BC,GACzBA,EAAMC,iBACN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAiB5C,UACGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAxB,SACE,wBAAQnC,UAAU,MAAMoC,QA3BL,WAG3B7B,GAAa,IAwBL,kC,gBCxBG8B,UAtBE,WACb,MAA+BC,YAAQC,KAA/BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,aAEf,CAACJ,EAAQC,IASX,OACI,cAAC,EAAD,CAAWnB,WARS,SAACuB,GACvBN,EAAYM,IAO8BpB,UAAsB,YAAXe","file":"static/js/4.40d89a34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__206mq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3l6WR\",\"loading\":\"QuoteForm_loading__7pcqN\",\"control\":\"QuoteForm_control__2gqQV\",\"actions\":\"QuoteForm_actions__2GsUh\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusHandler = () => {\n    setIsEditing(true);\n  }\n  const finishEditingHandler = () => {\n    // this has to be a separated handler from the submitFormHandler. \n    // the function runs synchronously and will not run setIsEditing before submitFormHandler finishes\n    setIsEditing(false);\n  }\n\n  return (\n    <>\n    {/* Prompt uses property 'when' and 'message'. if 'when' is true, it executes the prompt from the browser and displays the message provided */}\n    <Prompt when={isEditing} message={(path) => 'Are you sure? Data will be lost.'}/> \n      <Card>\n        <form onFocus={formFocusHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button className='btn' onClick={finishEditingHandler}>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\"\r\nconst NewQuote = () => {\r\n    const { sendRequest, status} = useHttp(addQuote);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n      if (status === 'completed') {\r\n        history.push('/quotes');  //redirect to /quotes \r\n      }\r\n    },[status, history]);\r\n\r\n    const addQuoteHandler = (quoteData) => {\r\n      sendRequest(quoteData)  \r\n      /*PROGRAMMATIC NAVIGATION */\r\n      // .push    -> redirects the page to a certain path provided\r\n      // .replace -> redirects the page to a certain path but does not get saved from history.(the back button from browser will not work)\r\n      // history.push('/quotes');\r\n    }\r\n    return (  \r\n        <QuoteForm onAddQuote={addQuoteHandler} isLoading={status === 'pending'}/>\r\n    );\r\n}\r\n \r\nexport default NewQuote;"],"sourceRoot":""}