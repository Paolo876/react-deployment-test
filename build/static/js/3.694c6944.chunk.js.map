{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteInfo.js"],"names":["module","exports","NewCommentForm","onAddedComment","quoteID","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","props","item","CommentsList","comments","map","comment","Comments","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteInfo","match","useRouteMatch","params","getSingleQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.694c6944.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__OyKuw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1oYps\",\"loading\":\"NewCommentForm_loading__tajdO\",\"control\":\"NewCommentForm_control__1ejzl\",\"actions\":\"NewCommentForm_actions__TLKMf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2r3Tf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1L8KY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1zNYj\"};","import { useRef, useEffect } from 'react';\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = ({onAddedComment, quoteID}) => {\n  const commentTextRef = useRef();\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n        commentData: {\n          text: enteredText\n        }, \n        quoteID: quoteID\n      });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner/></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from \"./CommentsList\"\n\nconst Comments = () => {\n  const {quoteID} = useParams();\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  useEffect(() => {\n    sendRequest(quoteID)\n  }, [quoteID, sendRequest])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // call this function to fetch comments again after submitting a new comment.\n  // use useCallback to prevent recreating the function when the Parent component re-renders. (prevents an infinite loop)\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteID);\n  }, [sendRequest, quoteID])\n\n  let comments;\n  if(status === 'pending'){\n    comments = <div className='centered'><LoadingSpinner/></div>\n  }\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0)){\n    comments = <CommentsList comments={loadedComments}/>\n  }\n  if(status === 'completed' && (loadedComments && loadedComments.length === 0)){\n    comments = <p className='centered'>No comments yet.</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddedComment={addedCommentHandler} quoteID={quoteID}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\"\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n// const DUMMY_QUOTES =[\r\n//     {id: 'q1', author: 'Pao', text: 'this is a sample text for q1.'},\r\n//     {id: 'q2', author: 'Paolo', text: 'this is a sample text for q2.'},\r\n//     {id: 'q3', author: 'Ja', text: 'this is a sample text for q3.'},\r\n// ]; \r\n\r\nconst QuoteInfo = () => {\r\n    const match = useRouteMatch();      //functions the same as useLocation but with more functionality\r\n    const params = useParams();\r\n    // const quote = DUMMY_QUOTES.find((item) => item.id === params.quoteID);\r\n    const { sendRequest, status, data: quote, error } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n      sendRequest(params.quoteID);\r\n    }, [sendRequest, params.quoteID]);\r\n    if( status === 'pending') {\r\n        return <LoadingSpinner/>\r\n    }\r\n    if(error){\r\n        return <p className='centered'>{error}</p>\r\n    }\r\n    if(!quote.text){\r\n        return <p>Nothing found.</p>\r\n    }\r\n    return (  \r\n        <>\r\n            <h1>Quote Information Page</h1>\r\n            <HighlightedQuote text={quote.text} author={quote.author}/>\r\n            \r\n            <Route path={`${match.path}`} exact>\r\n                <div className=\"centered\">\r\n                    <Link to={`${match.url}/comments`} className='btn--flat'>Add A Comment</Link>\r\n                </div>\r\n            </Route>\r\n\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments/>\r\n            </Route>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default QuoteInfo;"],"sourceRoot":""}